package parse

// Gameboy Advance ROM image
// STATUS: 1%

import (
	"encoding/binary"
	"os"
)

var (
	gbaLogo = [...]byte{
		0x24, 0xFF, 0xAE, 0x51, 0x69, 0x9A, 0xA2, 0x21, 0x3D, 0x84, 0x82, 0x0A,
		0x84, 0xE4, 0x09, 0xAD, 0x11, 0x24, 0x8B, 0x98, 0xC0, 0x81, 0x7F, 0x21,
		0xA3, 0x52, 0xBE, 0x19, 0x93, 0x09, 0xCE, 0x20, 0x10, 0x46, 0x4A, 0x4A,
		0xF8, 0x27, 0x31, 0xEC, 0x58, 0xC7, 0xE8, 0x33, 0x82, 0xE3, 0xCE, 0xBF,
		0x85, 0xF4, 0xDF, 0x94, 0xCE, 0x4B, 0x09, 0xC1, 0x94, 0x56, 0x8A, 0xC0,
		0x13, 0x72, 0xA7, 0xFC, 0x9F, 0x84, 0x4D, 0x73, 0xA3, 0xCA, 0x9A, 0x61,
		0x58, 0x97, 0xA3, 0x27, 0xFC, 0x03, 0x98, 0x76, 0x23, 0x1D, 0xC7, 0x61,
		0x03, 0x04, 0xAE, 0x56, 0xBF, 0x38, 0x84, 0x00, 0x40, 0xA7, 0x0E, 0xFD,
		0xFF, 0x52, 0xFE, 0x03, 0x6F, 0x95, 0x30, 0xF1, 0x97, 0xFB, 0xC0, 0x85,
		0x60, 0xD6, 0x80, 0x25, 0xA9, 0x63, 0xBE, 0x03, 0x01, 0x4E, 0x38, 0xE2,
		0xF9, 0xA2, 0x34, 0xFF, 0xBB, 0x3E, 0x03, 0x44, 0x78, 0x00, 0x90, 0xCB,
		0x88, 0x11, 0x3A, 0x94, 0x65, 0xC0, 0x7C, 0x63, 0x87, 0xF0, 0x3C, 0xAF,
		0xD6, 0x25, 0xE4, 0x8B, 0x38, 0x0A, 0xAC, 0x72, 0x21, 0xD4, 0xF8, 0x07}
)

func GBAROM(file *os.File) (*ParsedLayout, error) {

	if !isGBAROM(file) {
		return nil, nil
	}
	return parseGBAROM(file)
}

func isGBAROM(file *os.File) bool {

	if !hasGBALogo(file) {
		return false
	}
	return true
}

func hasGBALogo(file *os.File) bool {

	file.Seek(4, os.SEEK_SET)

	b := make([]byte, len(gbaLogo))
	if err := binary.Read(file, binary.LittleEndian, &b); err != nil {
		return false
	}
	for i := 0; i < len(gbaLogo); i++ {
		if gbaLogo[i] != b[i] {
			return false
		}
	}
	return true
}

func parseGBAROM(file *os.File) (*ParsedLayout, error) {

	res := ParsedLayout{
		FileKind: Binary,
		Layout: []Layout{{
			Offset: 0,
			Length: 192, // XXX
			Info:   "header",
			Type:   Group,
			Childs: []Layout{
				// 000h    4     ROM Entry Point  (32bit ARM branch opcode, eg. "B rom_start")
				{Offset: 0, Length: 4, Info: "entry point", Type: Uint32le}, // XXX le/be
				{Offset: 4, Length: 156, Info: "nintendo logo", Type: Bytes},
				{Offset: 160, Length: 12, Info: "game title", Type: ASCIIZ},
				{Offset: 172, Length: 4, Info: "game code", Type: ASCII},
				{Offset: 176, Length: 2, Info: "maker code", Type: ASCII},
				{Offset: 178, Length: 1, Info: "reserved (0x96)", Type: Uint8},
				{Offset: 179, Length: 1, Info: "main unit code", Type: Uint8}, // XXX = 0 for all gba models?!?!
				{Offset: 180, Length: 1, Info: "device type", Type: Uint8},
				{Offset: 181, Length: 7, Info: "reserved area", Type: Bytes},
				{Offset: 188, Length: 1, Info: "software version", Type: Uint8},
				{Offset: 189, Length: 1, Info: "checksum", Type: Uint8},
				{Offset: 190, Length: 2, Info: "reserved 2", Type: Bytes},
			}}}}

	return &res, nil
}
