/*
static readonly byte[] gba_logo = new byte[] {
    0x24, 0xFF, 0xAE, 0x51, 0x69, 0x9A, 0xA2, 0x21, 0x3D, 0x84, 0x82, 0x0A,
    0x84, 0xE4, 0x09, 0xAD, 0x11, 0x24, 0x8B, 0x98, 0xC0, 0x81, 0x7F, 0x21,
    0xA3, 0x52, 0xBE, 0x19, 0x93, 0x09, 0xCE, 0x20, 0x10, 0x46, 0x4A, 0x4A,
    0xF8, 0x27, 0x31, 0xEC, 0x58, 0xC7, 0xE8, 0x33, 0x82, 0xE3, 0xCE, 0xBF,
    0x85, 0xF4, 0xDF, 0x94, 0xCE, 0x4B, 0x09, 0xC1, 0x94, 0x56, 0x8A, 0xC0,
    0x13, 0x72, 0xA7, 0xFC, 0x9F, 0x84, 0x4D, 0x73, 0xA3, 0xCA, 0x9A, 0x61,
    0x58, 0x97, 0xA3, 0x27, 0xFC, 0x03, 0x98, 0x76, 0x23, 0x1D, 0xC7, 0x61,
    0x03, 0x04, 0xAE, 0x56, 0xBF, 0x38, 0x84, 0x00, 0x40, 0xA7, 0x0E, 0xFD,
    0xFF, 0x52, 0xFE, 0x03, 0x6F, 0x95, 0x30, 0xF1, 0x97, 0xFB, 0xC0, 0x85,
    0x60, 0xD6, 0x80, 0x25, 0xA9, 0x63, 0xBE, 0x03, 0x01, 0x4E, 0x38, 0xE2,
    0xF9, 0xA2, 0x34, 0xFF, 0xBB, 0x3E, 0x03, 0x44, 0x78, 0x00, 0x90, 0xCB,
    0x88, 0x11, 0x3A, 0x94, 0x65, 0xC0, 0x7C, 0x63, 0x87, 0xF0, 0x3C, 0xAF,
    0xD6, 0x25, 0xE4, 0x8B, 0x38, 0x0A, 0xAC, 0x72, 0x21, 0xD4, 0xF8, 0x07
};

public GameboyAdvanceRomReader(FileStream fs) : base(fs)
{
    name = "Gameboy Advance ROM image";
}

public bool HasSignature(long offset, byte[] sig)
{
    BaseStream.Position = offset;

    for (int i = 0; i < sig.Length; i++)
        if (ReadByte() != sig[i])
            return false;

    return true;
}

override public bool IsRecognized()
{
    // TODO valid file sizes: 0x400000

    if (!HasSignature(0x0004, gba_logo))
        return false;

    return true;
}

override public List<Chunk> GetFileStructure()
{
    List<Chunk> res = new List<Chunk>();

    var header = new Chunk("GBA header");
    res.Add(header);



    // 000h    4     ROM Entry Point  (32bit ARM branch opcode, eg. "B rom_start")


    var GbaLogo = new Chunk("Nintendo Logo", 156);
    GbaLogo.offset = 4;
    header.Nodes.Add(GbaLogo);

    var GameTitle = GbaLogo.RelativeTo("Game Title", 12);
    header.Nodes.Add(GameTitle);

    var GameCode = GameTitle.RelativeTo("Game Code", 4);
    header.Nodes.Add(GameCode);

    var MakerCode = GameCode.RelativeTo("Maker Code", 2);
    header.Nodes.Add(MakerCode);


    var FixedVal = MakerCode.RelativeToByte("Fixed val 0x96");
    header.Nodes.Add(FixedVal);


    var MainUnitCode = FixedVal.RelativeToByte("Main Unit Code"); // = 0 for all gba models?!?!
    header.Nodes.Add(MainUnitCode);


    var DeviceType = MainUnitCode.RelativeToByte("Device Type"); // usually 0
    header.Nodes.Add(DeviceType);

    var Reserved = DeviceType.RelativeTo("Reserved Area", 7);
    header.Nodes.Add(Reserved);


    var Version = Reserved.RelativeToByte("Software version");
    header.Nodes.Add(Version);


    var checksum = Version.RelativeToByte("Checksum");
    header.Nodes.Add(checksum);


    var Reserved2 = checksum.RelativeTo("Reserved2", 2);
    header.Nodes.Add(Reserved2);

    return res;
}
*/
